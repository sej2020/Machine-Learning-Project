------ Date: 15-02-2023 03:00:36 | Level: ERROR | Function: run | Line: 223 | (Process Details : (28040, SpawnPoolWorker-4), Thread Details : (21740, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils_backup.py", line 219, in run
    y = x/0
ZeroDivisionError: division by zero
------ Date: 15-02-2023 03:00:36 | Level: ERROR | Function: run | Line: 223 | (Process Details : (28040, SpawnPoolWorker-4), Thread Details : (21740, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils_backup.py", line 219, in run
    y = x/0
ZeroDivisionError: division by zero
------ Date: 15-02-2023 03:00:37 | Level: ERROR | Function: run | Line: 223 | (Process Details : (12240, SpawnPoolWorker-2), Thread Details : (5952, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils_backup.py", line 219, in run
    y = x/0
ZeroDivisionError: division by zero
------ Date: 15-02-2023 03:00:37 | Level: ERROR | Function: run | Line: 223 | (Process Details : (12240, SpawnPoolWorker-2), Thread Details : (5952, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils_backup.py", line 219, in run
    y = x/0
ZeroDivisionError: division by zero
------ Date: 15-02-2023 03:00:37 | Level: ERROR | Function: run | Line: 223 | (Process Details : (12240, SpawnPoolWorker-2), Thread Details : (5952, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils_backup.py", line 219, in run
    y = x/0
ZeroDivisionError: division by zero
------ Date: 15-02-2023 03:00:37 | Level: ERROR | Function: run | Line: 223 | (Process Details : (12240, SpawnPoolWorker-2), Thread Details : (5952, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils_backup.py", line 219, in run
    y = x/0
ZeroDivisionError: division by zero
------ Date: 15-02-2023 03:00:37 | Level: ERROR | Function: run | Line: 223 | (Process Details : (30024, SpawnPoolWorker-7), Thread Details : (24260, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils_backup.py", line 219, in run
    y = x/0
ZeroDivisionError: division by zero
------ Date: 15-02-2023 03:00:40 | Level: ERROR | Function: run | Line: 223 | (Process Details : (5604, SpawnPoolWorker-3), Thread Details : (26520, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils_backup.py", line 213, in run
    calculated = metric_help[k][2](test_labels, y_pred)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 442, in mean_squared_error
    y_type, y_true, y_pred, multioutput = _check_reg_targets(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 102, in _check_reg_targets
    y_pred = check_array(y_pred, ensure_2d=False, dtype=dtype)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input contains NaN.
------ Date: 15-02-2023 03:00:40 | Level: ERROR | Function: run | Line: 223 | (Process Details : (5604, SpawnPoolWorker-3), Thread Details : (26520, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils_backup.py", line 213, in run
    calculated = metric_help[k][2](test_labels, y_pred)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 442, in mean_squared_error
    y_type, y_true, y_pred, multioutput = _check_reg_targets(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 102, in _check_reg_targets
    y_pred = check_array(y_pred, ensure_2d=False, dtype=dtype)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input contains NaN.
------ Date: 15-02-2023 03:00:40 | Level: ERROR | Function: run | Line: 223 | (Process Details : (5604, SpawnPoolWorker-3), Thread Details : (26520, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils_backup.py", line 213, in run
    calculated = metric_help[k][2](test_labels, y_pred)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 442, in mean_squared_error
    y_type, y_true, y_pred, multioutput = _check_reg_targets(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 102, in _check_reg_targets
    y_pred = check_array(y_pred, ensure_2d=False, dtype=dtype)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input contains NaN.
------ Date: 15-02-2023 03:00:40 | Level: ERROR | Function: run | Line: 223 | (Process Details : (5604, SpawnPoolWorker-3), Thread Details : (26520, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils_backup.py", line 213, in run
    calculated = metric_help[k][2](test_labels, y_pred)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 442, in mean_squared_error
    y_type, y_true, y_pred, multioutput = _check_reg_targets(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 102, in _check_reg_targets
    y_pred = check_array(y_pred, ensure_2d=False, dtype=dtype)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input contains NaN.
------ Date: 15-02-2023 03:00:40 | Level: ERROR | Function: run | Line: 223 | (Process Details : (5604, SpawnPoolWorker-3), Thread Details : (26520, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils_backup.py", line 213, in run
    calculated = metric_help[k][2](test_labels, y_pred)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 442, in mean_squared_error
    y_type, y_true, y_pred, multioutput = _check_reg_targets(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 102, in _check_reg_targets
    y_pred = check_array(y_pred, ensure_2d=False, dtype=dtype)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input contains NaN.
------ Date: 15-02-2023 03:00:40 | Level: ERROR | Function: run | Line: 223 | (Process Details : (5604, SpawnPoolWorker-3), Thread Details : (26520, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils_backup.py", line 213, in run
    calculated = metric_help[k][2](test_labels, y_pred)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 442, in mean_squared_error
    y_type, y_true, y_pred, multioutput = _check_reg_targets(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 102, in _check_reg_targets
    y_pred = check_array(y_pred, ensure_2d=False, dtype=dtype)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input contains NaN.
------ Date: 15-02-2023 03:00:40 | Level: ERROR | Function: run | Line: 223 | (Process Details : (5604, SpawnPoolWorker-3), Thread Details : (26520, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils_backup.py", line 213, in run
    calculated = metric_help[k][2](test_labels, y_pred)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 442, in mean_squared_error
    y_type, y_true, y_pred, multioutput = _check_reg_targets(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 102, in _check_reg_targets
    y_pred = check_array(y_pred, ensure_2d=False, dtype=dtype)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input contains NaN.
------ Date: 15-02-2023 03:00:40 | Level: ERROR | Function: run | Line: 223 | (Process Details : (5604, SpawnPoolWorker-3), Thread Details : (26520, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils_backup.py", line 213, in run
    calculated = metric_help[k][2](test_labels, y_pred)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 442, in mean_squared_error
    y_type, y_true, y_pred, multioutput = _check_reg_targets(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 102, in _check_reg_targets
    y_pred = check_array(y_pred, ensure_2d=False, dtype=dtype)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input contains NaN.
------ Date: 15-02-2023 03:00:40 | Level: ERROR | Function: run | Line: 223 | (Process Details : (11928, SpawnPoolWorker-6), Thread Details : (17568, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils_backup.py", line 219, in run
    y = x/0
ZeroDivisionError: division by zero
------ Date: 15-02-2023 03:00:40 | Level: ERROR | Function: run | Line: 223 | (Process Details : (5604, SpawnPoolWorker-3), Thread Details : (26520, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils_backup.py", line 213, in run
    calculated = metric_help[k][2](test_labels, y_pred)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 442, in mean_squared_error
    y_type, y_true, y_pred, multioutput = _check_reg_targets(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 102, in _check_reg_targets
    y_pred = check_array(y_pred, ensure_2d=False, dtype=dtype)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input contains NaN.
------ Date: 15-02-2023 03:00:40 | Level: ERROR | Function: run | Line: 223 | (Process Details : (5604, SpawnPoolWorker-3), Thread Details : (26520, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils_backup.py", line 213, in run
    calculated = metric_help[k][2](test_labels, y_pred)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 442, in mean_squared_error
    y_type, y_true, y_pred, multioutput = _check_reg_targets(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 102, in _check_reg_targets
    y_pred = check_array(y_pred, ensure_2d=False, dtype=dtype)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input contains NaN.
------ Date: 15-02-2023 03:00:44 | Level: ERROR | Function: run | Line: 223 | (Process Details : (25816, SpawnPoolWorker-8), Thread Details : (16912, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils_backup.py", line 219, in run
    y = x/0
ZeroDivisionError: division by zero
------ Date: 15-02-2023 03:00:47 | Level: ERROR | Function: run | Line: 223 | (Process Details : (11928, SpawnPoolWorker-6), Thread Details : (17568, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils_backup.py", line 219, in run
    y = x/0
ZeroDivisionError: division by zero
------ Date: 15-02-2023 08:01:22 | Level: ERROR | Function: comparison | Line: 199 | (Process Details : (26272, MainProcess), Thread Details : (30624, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils_backup.py", line 160, in comparison
    raise TypeError
TypeError
------ Date: 15-02-2023 08:08:48 | Level: ERROR | Function: comparison | Line: 199 | (Process Details : (18668, MainProcess), Thread Details : (30108, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils_backup.py", line 160, in comparison
    raise TypeError
TypeError
------ Date: 15-02-2023 08:11:42 | Level: ERROR | Function: comparison | Line: 199 | (Process Details : (29076, MainProcess), Thread Details : (28324, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils_backup.py", line 160, in comparison
    raise TypeError
TypeError
------ Date: 15-02-2023 08:13:55 | Level: ERROR | Function: comparison | Line: 199 | (Process Details : (31776, MainProcess), Thread Details : (30532, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils_backup.py", line 160, in comparison
    raise TypeError
TypeError
------ Date: 15-02-2023 08:16:40 | Level: ERROR | Function: comparison | Line: 199 | (Process Details : (28316, MainProcess), Thread Details : (6224, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils_backup.py", line 160, in comparison
    raise TypeError
TypeError
------ Date: 15-02-2023 08:25:06 | Level: ERROR | Function: comparison | Line: 199 | (Process Details : (21200, MainProcess), Thread Details : (31008, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils_backup.py", line 160, in comparison
    raise TypeError
TypeError
------ Date: 15-02-2023 08:45:11 | Level: ERROR | Function: comparison | Line: 199 | (Process Details : (12216, MainProcess), Thread Details : (31836, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils_backup.py", line 160, in comparison
    raise TypeError
TypeError
------ Date: 15-02-2023 08:46:20 | Level: ERROR | Function: comparison | Line: 199 | (Process Details : (27048, MainProcess), Thread Details : (22160, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils_backup.py", line 160, in comparison
    raise TypeError
TypeError
------ Date: 15-02-2023 09:06:08 | Level: ERROR | Function: comparison | Line: 199 | (Process Details : (7484, MainProcess), Thread Details : (4442162688, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "/Users/joshuaelms/Desktop/github_repos/Machine-Learning-Project/AutoML/ScikitLearn/parSim_v5/utils_backup.py", line 160, in comparison
    raise TypeError
TypeError
------ Date: 15-02-2023 09:07:36 | Level: ERROR | Function: comparison | Line: 199 | (Process Details : (7552, MainProcess), Thread Details : (4594001408, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "/Users/joshuaelms/Desktop/github_repos/Machine-Learning-Project/AutoML/ScikitLearn/parSim_v5/utils_backup.py", line 160, in comparison
    raise TypeError
TypeError
------ Date: 25-02-2023 06:13:23 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_bayes.py", line 606, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ARDRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:23 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_bayes.py", line 606, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ARDRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:23 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_bayes.py", line 606, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ARDRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:23 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_bayes.py", line 606, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ARDRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:23 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_bayes.py", line 606, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ARDRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:23 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_bayes.py", line 606, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ARDRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:23 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_bayes.py", line 606, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ARDRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:24 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 319, in run
    y_pred = model_trained.predict(test_attrib)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_bayes.py", line 756, in predict
    y_mean = self._decision_function(X)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 338, in _decision_function
    X = self._validate_data(X, accept_sparse=["csr", "csc", "coo"], reset=False)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ARDRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:24 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_bayes.py", line 606, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ARDRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:24 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_bayes.py", line 606, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ARDRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:24 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_bayes.py", line 231, in fit
    X, y = self._validate_data(X, y, dtype=[np.float64, np.float32], y_numeric=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
BayesianRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:24 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 1247, in fit
    super().fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 186, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 549, in _validate_data
    X = check_array(X, input_name="X", **check_X_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
DecisionTreeRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:24 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 1247, in fit
    super().fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 186, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 549, in _validate_data
    X = check_array(X, input_name="X", **check_X_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
DecisionTreeRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:24 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_bayes.py", line 231, in fit
    X, y = self._validate_data(X, y, dtype=[np.float64, np.float32], y_numeric=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
BayesianRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:24 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 1247, in fit
    super().fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 186, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 549, in _validate_data
    X = check_array(X, input_name="X", **check_X_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
DecisionTreeRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:24 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 1247, in fit
    super().fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 186, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 549, in _validate_data
    X = check_array(X, input_name="X", **check_X_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
DecisionTreeRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:24 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_bayes.py", line 231, in fit
    X, y = self._validate_data(X, y, dtype=[np.float64, np.float32], y_numeric=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
BayesianRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:24 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 1247, in fit
    super().fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 186, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 549, in _validate_data
    X = check_array(X, input_name="X", **check_X_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
DecisionTreeRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:24 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 1247, in fit
    super().fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 186, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 549, in _validate_data
    X = check_array(X, input_name="X", **check_X_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
DecisionTreeRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:24 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_bayes.py", line 231, in fit
    X, y = self._validate_data(X, y, dtype=[np.float64, np.float32], y_numeric=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
BayesianRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:24 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 1247, in fit
    super().fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 186, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 549, in _validate_data
    X = check_array(X, input_name="X", **check_X_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
DecisionTreeRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:24 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_bayes.py", line 231, in fit
    X, y = self._validate_data(X, y, dtype=[np.float64, np.float32], y_numeric=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
BayesianRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:24 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_bayes.py", line 231, in fit
    X, y = self._validate_data(X, y, dtype=[np.float64, np.float32], y_numeric=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
BayesianRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:24 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 319, in run
    y_pred = model_trained.predict(test_attrib)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 426, in predict
    X = self._validate_X_predict(X, check_input)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 392, in _validate_X_predict
    X = self._validate_data(X, dtype=DTYPE, accept_sparse="csr", reset=False)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
DecisionTreeRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:24 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_bayes.py", line 231, in fit
    X, y = self._validate_data(X, y, dtype=[np.float64, np.float32], y_numeric=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
BayesianRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:24 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 1247, in fit
    super().fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 186, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 549, in _validate_data
    X = check_array(X, input_name="X", **check_X_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
DecisionTreeRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:24 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 1247, in fit
    super().fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 186, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 549, in _validate_data
    X = check_array(X, input_name="X", **check_X_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
DecisionTreeRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:24 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_forest.py", line 346, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreesRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:24 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_forest.py", line 346, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreesRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:24 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_forest.py", line 346, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreesRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:24 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_forest.py", line 346, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreesRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:24 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_forest.py", line 346, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreesRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:24 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_forest.py", line 346, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreesRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:24 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_forest.py", line 346, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreesRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:24 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 319, in run
    y_pred = model_trained.predict(test_attrib)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_bayes.py", line 352, in predict
    y_mean = self._decision_function(X)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 338, in _decision_function
    X = self._validate_data(X, accept_sparse=["csr", "csc", "coo"], reset=False)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
BayesianRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:24 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_bayes.py", line 231, in fit
    X, y = self._validate_data(X, y, dtype=[np.float64, np.float32], y_numeric=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
BayesianRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:24 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_bayes.py", line 231, in fit
    X, y = self._validate_data(X, y, dtype=[np.float64, np.float32], y_numeric=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
BayesianRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:24 | Level: ERROR | Function: run | Line: 328 | (Process Details : (34268, SpawnPoolWorker-7), Thread Details : (23632, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_coordinate_descent.py", line 911, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ElasticNet does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:24 | Level: ERROR | Function: run | Line: 328 | (Process Details : (34268, SpawnPoolWorker-7), Thread Details : (23632, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_coordinate_descent.py", line 911, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ElasticNet does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:24 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_weight_boosting.py", line 126, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
AdaBoostRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_weight_boosting.py", line 126, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
AdaBoostRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_weight_boosting.py", line 126, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
AdaBoostRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (34268, SpawnPoolWorker-7), Thread Details : (23632, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_coordinate_descent.py", line 911, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ElasticNet does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_weight_boosting.py", line 126, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
AdaBoostRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (34268, SpawnPoolWorker-7), Thread Details : (23632, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_coordinate_descent.py", line 911, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ElasticNet does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (34268, SpawnPoolWorker-7), Thread Details : (23632, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_coordinate_descent.py", line 911, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ElasticNet does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (34268, SpawnPoolWorker-7), Thread Details : (23632, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_coordinate_descent.py", line 911, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ElasticNet does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (34268, SpawnPoolWorker-7), Thread Details : (23632, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_coordinate_descent.py", line 911, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ElasticNet does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_weight_boosting.py", line 126, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
AdaBoostRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_weight_boosting.py", line 126, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
AdaBoostRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (13888, SpawnPoolWorker-5), Thread Details : (32560, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_glm\glm.py", line 193, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GammaRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_weight_boosting.py", line 126, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
AdaBoostRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (13888, SpawnPoolWorker-5), Thread Details : (32560, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_glm\glm.py", line 193, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GammaRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (13888, SpawnPoolWorker-5), Thread Details : (32560, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_glm\glm.py", line 193, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GammaRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (13888, SpawnPoolWorker-5), Thread Details : (32560, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_glm\glm.py", line 193, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GammaRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (34268, SpawnPoolWorker-7), Thread Details : (23632, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 319, in run
    y_pred = model_trained.predict(test_attrib)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 355, in predict
    return self._decision_function(X)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_coordinate_descent.py", line 1077, in _decision_function
    return super()._decision_function(X)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 338, in _decision_function
    X = self._validate_data(X, accept_sparse=["csr", "csc", "coo"], reset=False)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ElasticNet does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (34268, SpawnPoolWorker-7), Thread Details : (23632, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_coordinate_descent.py", line 911, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ElasticNet does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (13888, SpawnPoolWorker-5), Thread Details : (32560, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_glm\glm.py", line 193, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GammaRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (34268, SpawnPoolWorker-7), Thread Details : (23632, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_coordinate_descent.py", line 911, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ElasticNet does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (34268, SpawnPoolWorker-7), Thread Details : (23632, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_huber.py", line 297, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
HuberRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (34268, SpawnPoolWorker-7), Thread Details : (23632, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_huber.py", line 297, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
HuberRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (13888, SpawnPoolWorker-5), Thread Details : (32560, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_glm\glm.py", line 193, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GammaRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (34268, SpawnPoolWorker-7), Thread Details : (23632, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_huber.py", line 297, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
HuberRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (13888, SpawnPoolWorker-5), Thread Details : (32560, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_glm\glm.py", line 193, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GammaRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (34268, SpawnPoolWorker-7), Thread Details : (23632, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_huber.py", line 297, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
HuberRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (34268, SpawnPoolWorker-7), Thread Details : (23632, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_huber.py", line 297, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
HuberRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (34268, SpawnPoolWorker-7), Thread Details : (23632, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_huber.py", line 297, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
HuberRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (34268, SpawnPoolWorker-7), Thread Details : (23632, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_huber.py", line 297, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
HuberRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (25840, SpawnPoolWorker-8), Thread Details : (35916, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_bagging.py", line 339, in fit
    return self._fit(X, y, self.max_samples, sample_weight=sample_weight)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_bagging.py", line 474, in _fit
    all_results = Parallel(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 1048, in __call__
    if self.dispatch_one_batch(iterator):
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 864, in dispatch_one_batch
    self._dispatch(tasks)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 782, in _dispatch
    job = self._backend.apply_async(batch, callback=cb)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\_parallel_backends.py", line 208, in apply_async
    result = ImmediateResult(func)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\_parallel_backends.py", line 572, in __init__
    self.results = batch()
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 263, in __call__
    return [func(*args, **kwargs)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 263, in <listcomp>
    return [func(*args, **kwargs)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\fixes.py", line 117, in __call__
    return self.function(*args, **kwargs)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_bagging.py", line 143, in _parallel_build_estimators
    estimator_fit(X_, y, sample_weight=curr_sample_weight)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 1247, in fit
    super().fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 186, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 549, in _validate_data
    X = check_array(X, input_name="X", **check_X_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
DecisionTreeRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (25840, SpawnPoolWorker-8), Thread Details : (35916, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_bagging.py", line 339, in fit
    return self._fit(X, y, self.max_samples, sample_weight=sample_weight)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_bagging.py", line 474, in _fit
    all_results = Parallel(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 1048, in __call__
    if self.dispatch_one_batch(iterator):
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 864, in dispatch_one_batch
    self._dispatch(tasks)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 782, in _dispatch
    job = self._backend.apply_async(batch, callback=cb)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\_parallel_backends.py", line 208, in apply_async
    result = ImmediateResult(func)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\_parallel_backends.py", line 572, in __init__
    self.results = batch()
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 263, in __call__
    return [func(*args, **kwargs)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 263, in <listcomp>
    return [func(*args, **kwargs)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\fixes.py", line 117, in __call__
    return self.function(*args, **kwargs)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_bagging.py", line 143, in _parallel_build_estimators
    estimator_fit(X_, y, sample_weight=curr_sample_weight)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 1247, in fit
    super().fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 186, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 549, in _validate_data
    X = check_array(X, input_name="X", **check_X_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
DecisionTreeRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_gb.py", line 429, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GradientBoostingRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_gb.py", line 429, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GradientBoostingRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_gb.py", line 429, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GradientBoostingRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (25840, SpawnPoolWorker-8), Thread Details : (35916, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_bagging.py", line 339, in fit
    return self._fit(X, y, self.max_samples, sample_weight=sample_weight)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_bagging.py", line 474, in _fit
    all_results = Parallel(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 1048, in __call__
    if self.dispatch_one_batch(iterator):
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 864, in dispatch_one_batch
    self._dispatch(tasks)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 782, in _dispatch
    job = self._backend.apply_async(batch, callback=cb)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\_parallel_backends.py", line 208, in apply_async
    result = ImmediateResult(func)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\_parallel_backends.py", line 572, in __init__
    self.results = batch()
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 263, in __call__
    return [func(*args, **kwargs)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 263, in <listcomp>
    return [func(*args, **kwargs)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\fixes.py", line 117, in __call__
    return self.function(*args, **kwargs)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_bagging.py", line 143, in _parallel_build_estimators
    estimator_fit(X_, y, sample_weight=curr_sample_weight)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 1247, in fit
    super().fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 186, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 549, in _validate_data
    X = check_array(X, input_name="X", **check_X_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
DecisionTreeRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_gb.py", line 429, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GradientBoostingRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_gb.py", line 429, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GradientBoostingRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_gb.py", line 429, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GradientBoostingRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_gb.py", line 429, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GradientBoostingRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (25840, SpawnPoolWorker-8), Thread Details : (35916, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_bagging.py", line 339, in fit
    return self._fit(X, y, self.max_samples, sample_weight=sample_weight)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_bagging.py", line 474, in _fit
    all_results = Parallel(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 1048, in __call__
    if self.dispatch_one_batch(iterator):
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 864, in dispatch_one_batch
    self._dispatch(tasks)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 782, in _dispatch
    job = self._backend.apply_async(batch, callback=cb)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\_parallel_backends.py", line 208, in apply_async
    result = ImmediateResult(func)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\_parallel_backends.py", line 572, in __init__
    self.results = batch()
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 263, in __call__
    return [func(*args, **kwargs)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 263, in <listcomp>
    return [func(*args, **kwargs)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\fixes.py", line 117, in __call__
    return self.function(*args, **kwargs)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_bagging.py", line 143, in _parallel_build_estimators
    estimator_fit(X_, y, sample_weight=curr_sample_weight)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 1247, in fit
    super().fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 186, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 549, in _validate_data
    X = check_array(X, input_name="X", **check_X_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
DecisionTreeRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 1247, in fit
    super().fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 186, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 549, in _validate_data
    X = check_array(X, input_name="X", **check_X_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreeRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (25840, SpawnPoolWorker-8), Thread Details : (35916, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_bagging.py", line 339, in fit
    return self._fit(X, y, self.max_samples, sample_weight=sample_weight)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_bagging.py", line 474, in _fit
    all_results = Parallel(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 1048, in __call__
    if self.dispatch_one_batch(iterator):
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 864, in dispatch_one_batch
    self._dispatch(tasks)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 782, in _dispatch
    job = self._backend.apply_async(batch, callback=cb)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\_parallel_backends.py", line 208, in apply_async
    result = ImmediateResult(func)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\_parallel_backends.py", line 572, in __init__
    self.results = batch()
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 263, in __call__
    return [func(*args, **kwargs)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 263, in <listcomp>
    return [func(*args, **kwargs)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\fixes.py", line 117, in __call__
    return self.function(*args, **kwargs)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_bagging.py", line 143, in _parallel_build_estimators
    estimator_fit(X_, y, sample_weight=curr_sample_weight)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 1247, in fit
    super().fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 186, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 549, in _validate_data
    X = check_array(X, input_name="X", **check_X_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
DecisionTreeRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 1247, in fit
    super().fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 186, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 549, in _validate_data
    X = check_array(X, input_name="X", **check_X_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreeRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (25840, SpawnPoolWorker-8), Thread Details : (35916, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_bagging.py", line 339, in fit
    return self._fit(X, y, self.max_samples, sample_weight=sample_weight)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_bagging.py", line 474, in _fit
    all_results = Parallel(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 1048, in __call__
    if self.dispatch_one_batch(iterator):
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 864, in dispatch_one_batch
    self._dispatch(tasks)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 782, in _dispatch
    job = self._backend.apply_async(batch, callback=cb)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\_parallel_backends.py", line 208, in apply_async
    result = ImmediateResult(func)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\_parallel_backends.py", line 572, in __init__
    self.results = batch()
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 263, in __call__
    return [func(*args, **kwargs)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 263, in <listcomp>
    return [func(*args, **kwargs)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\fixes.py", line 117, in __call__
    return self.function(*args, **kwargs)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_bagging.py", line 143, in _parallel_build_estimators
    estimator_fit(X_, y, sample_weight=curr_sample_weight)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 1247, in fit
    super().fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 186, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 549, in _validate_data
    X = check_array(X, input_name="X", **check_X_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
DecisionTreeRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 1247, in fit
    super().fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 186, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 549, in _validate_data
    X = check_array(X, input_name="X", **check_X_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreeRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 1247, in fit
    super().fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 186, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 549, in _validate_data
    X = check_array(X, input_name="X", **check_X_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreeRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 1247, in fit
    super().fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 186, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 549, in _validate_data
    X = check_array(X, input_name="X", **check_X_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreeRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 1247, in fit
    super().fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 186, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 549, in _validate_data
    X = check_array(X, input_name="X", **check_X_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreeRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (25840, SpawnPoolWorker-8), Thread Details : (35916, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_bagging.py", line 339, in fit
    return self._fit(X, y, self.max_samples, sample_weight=sample_weight)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_bagging.py", line 474, in _fit
    all_results = Parallel(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 1048, in __call__
    if self.dispatch_one_batch(iterator):
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 864, in dispatch_one_batch
    self._dispatch(tasks)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 782, in _dispatch
    job = self._backend.apply_async(batch, callback=cb)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\_parallel_backends.py", line 208, in apply_async
    result = ImmediateResult(func)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\_parallel_backends.py", line 572, in __init__
    self.results = batch()
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 263, in __call__
    return [func(*args, **kwargs)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 263, in <listcomp>
    return [func(*args, **kwargs)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\fixes.py", line 117, in __call__
    return self.function(*args, **kwargs)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_bagging.py", line 143, in _parallel_build_estimators
    estimator_fit(X_, y, sample_weight=curr_sample_weight)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 1247, in fit
    super().fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 186, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 549, in _validate_data
    X = check_array(X, input_name="X", **check_X_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
DecisionTreeRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 319, in run
    y_pred = model_trained.predict(test_attrib)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 426, in predict
    X = self._validate_X_predict(X, check_input)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 392, in _validate_X_predict
    X = self._validate_data(X, dtype=DTYPE, accept_sparse="csr", reset=False)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreeRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 1247, in fit
    super().fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 186, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 549, in _validate_data
    X = check_array(X, input_name="X", **check_X_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreeRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 1247, in fit
    super().fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 186, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 549, in _validate_data
    X = check_array(X, input_name="X", **check_X_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreeRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_regression.py", line 217, in fit
    return self._fit(X, y)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_base.py", line 454, in _fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_regression.py", line 217, in fit
    return self._fit(X, y)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_base.py", line 454, in _fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_regression.py", line 217, in fit
    return self._fit(X, y)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_base.py", line 454, in _fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_regression.py", line 217, in fit
    return self._fit(X, y)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_base.py", line 454, in _fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_regression.py", line 217, in fit
    return self._fit(X, y)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_base.py", line 454, in _fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_regression.py", line 217, in fit
    return self._fit(X, y)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_base.py", line 454, in _fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_regression.py", line 217, in fit
    return self._fit(X, y)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_base.py", line 454, in _fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 319, in run
    y_pred = model_trained.predict(test_attrib)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_regression.py", line 236, in predict
    neigh_ind = self.kneighbors(X, return_distance=False)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_base.py", line 806, in kneighbors
    X = self._validate_data(X, accept_sparse="csr", reset=False, order="C")
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_regression.py", line 217, in fit
    return self._fit(X, y)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_base.py", line 454, in _fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 319, in run
    y_pred = model_trained.predict(test_attrib)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_forest.py", line 982, in predict
    X = self._validate_X_predict(X)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_forest.py", line 603, in _validate_X_predict
    X = self._validate_data(X, dtype=DTYPE, accept_sparse="csr", reset=False)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreesRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 319, in run
    y_pred = model_trained.predict(test_attrib)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_weight_boosting.py", line 1229, in predict
    X = self._check_X(X)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_weight_boosting.py", line 94, in _check_X
    return self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
AdaBoostRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_forest.py", line 346, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreesRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_regression.py", line 217, in fit
    return self._fit(X, y)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_base.py", line 454, in _fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (25840, SpawnPoolWorker-8), Thread Details : (35916, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 319, in run
    y_pred = model_trained.predict(test_attrib)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_bagging.py", line 1221, in predict
    all_y_hat = Parallel(n_jobs=n_jobs, verbose=self.verbose)(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 1048, in __call__
    if self.dispatch_one_batch(iterator):
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 864, in dispatch_one_batch
    self._dispatch(tasks)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 782, in _dispatch
    job = self._backend.apply_async(batch, callback=cb)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\_parallel_backends.py", line 208, in apply_async
    result = ImmediateResult(func)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\_parallel_backends.py", line 572, in __init__
    self.results = batch()
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 263, in __call__
    return [func(*args, **kwargs)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 263, in <listcomp>
    return [func(*args, **kwargs)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\fixes.py", line 117, in __call__
    return self.function(*args, **kwargs)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_bagging.py", line 216, in _parallel_predict_regression
    return sum(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_bagging.py", line 217, in <genexpr>
    estimator.predict(X[:, features])
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 426, in predict
    X = self._validate_X_predict(X, check_input)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 392, in _validate_X_predict
    X = self._validate_data(X, dtype=DTYPE, accept_sparse="csr", reset=False)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
DecisionTreeRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_forest.py", line 346, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreesRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_weight_boosting.py", line 126, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
AdaBoostRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_weight_boosting.py", line 126, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
AdaBoostRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (25840, SpawnPoolWorker-8), Thread Details : (35916, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_bagging.py", line 339, in fit
    return self._fit(X, y, self.max_samples, sample_weight=sample_weight)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_bagging.py", line 474, in _fit
    all_results = Parallel(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 1048, in __call__
    if self.dispatch_one_batch(iterator):
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 864, in dispatch_one_batch
    self._dispatch(tasks)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 782, in _dispatch
    job = self._backend.apply_async(batch, callback=cb)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\_parallel_backends.py", line 208, in apply_async
    result = ImmediateResult(func)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\_parallel_backends.py", line 572, in __init__
    self.results = batch()
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 263, in __call__
    return [func(*args, **kwargs)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 263, in <listcomp>
    return [func(*args, **kwargs)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\fixes.py", line 117, in __call__
    return self.function(*args, **kwargs)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_bagging.py", line 143, in _parallel_build_estimators
    estimator_fit(X_, y, sample_weight=curr_sample_weight)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 1247, in fit
    super().fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 186, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 549, in _validate_data
    X = check_array(X, input_name="X", **check_X_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
DecisionTreeRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_coordinate_descent.py", line 911, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
Lasso does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_coordinate_descent.py", line 911, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
Lasso does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_coordinate_descent.py", line 911, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
Lasso does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_coordinate_descent.py", line 911, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
Lasso does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_coordinate_descent.py", line 911, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
Lasso does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_least_angle.py", line 1126, in fit
    X, y = self._validate_data(X, y, y_numeric=True, multi_output=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
Lars does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_coordinate_descent.py", line 911, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
Lasso does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (25840, SpawnPoolWorker-8), Thread Details : (35916, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_bagging.py", line 339, in fit
    return self._fit(X, y, self.max_samples, sample_weight=sample_weight)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_bagging.py", line 474, in _fit
    all_results = Parallel(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 1048, in __call__
    if self.dispatch_one_batch(iterator):
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 864, in dispatch_one_batch
    self._dispatch(tasks)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 782, in _dispatch
    job = self._backend.apply_async(batch, callback=cb)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\_parallel_backends.py", line 208, in apply_async
    result = ImmediateResult(func)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\_parallel_backends.py", line 572, in __init__
    self.results = batch()
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 263, in __call__
    return [func(*args, **kwargs)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\joblib\parallel.py", line 263, in <listcomp>
    return [func(*args, **kwargs)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\fixes.py", line 117, in __call__
    return self.function(*args, **kwargs)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_bagging.py", line 143, in _parallel_build_estimators
    estimator_fit(X_, y, sample_weight=curr_sample_weight)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 1247, in fit
    super().fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\tree\_classes.py", line 186, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 549, in _validate_data
    X = check_array(X, input_name="X", **check_X_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
DecisionTreeRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_least_angle.py", line 1126, in fit
    X, y = self._validate_data(X, y, y_numeric=True, multi_output=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
Lars does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_coordinate_descent.py", line 911, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
Lasso does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_least_angle.py", line 1126, in fit
    X, y = self._validate_data(X, y, y_numeric=True, multi_output=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
Lars does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 319, in run
    y_pred = model_trained.predict(test_attrib)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 355, in predict
    return self._decision_function(X)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_coordinate_descent.py", line 1077, in _decision_function
    return super()._decision_function(X)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 338, in _decision_function
    X = self._validate_data(X, accept_sparse=["csr", "csc", "coo"], reset=False)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
Lasso does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_least_angle.py", line 1126, in fit
    X, y = self._validate_data(X, y, y_numeric=True, multi_output=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LassoLars does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (25840, SpawnPoolWorker-8), Thread Details : (35916, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_least_angle.py", line 2251, in fit
    X, y = self._validate_data(X, y, y_numeric=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LassoLarsIC does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 319, in run
    y_pred = model_trained.predict(test_attrib)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_gb.py", line 1798, in predict
    X = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GradientBoostingRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_coordinate_descent.py", line 911, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
Lasso does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_least_angle.py", line 1126, in fit
    X, y = self._validate_data(X, y, y_numeric=True, multi_output=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
Lars does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_coordinate_descent.py", line 911, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
Lasso does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_gb.py", line 429, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GradientBoostingRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_least_angle.py", line 1126, in fit
    X, y = self._validate_data(X, y, y_numeric=True, multi_output=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
Lars does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_gb.py", line 429, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GradientBoostingRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_least_angle.py", line 1126, in fit
    X, y = self._validate_data(X, y, y_numeric=True, multi_output=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LassoLars does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 649, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 649, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 649, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 649, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 649, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 649, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (25840, SpawnPoolWorker-8), Thread Details : (35916, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_least_angle.py", line 2251, in fit
    X, y = self._validate_data(X, y, y_numeric=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LassoLarsIC does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 649, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (25840, SpawnPoolWorker-8), Thread Details : (35916, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_least_angle.py", line 2251, in fit
    X, y = self._validate_data(X, y, y_numeric=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LassoLarsIC does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\svm\_classes.py", line 509, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearSVR does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:25 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\svm\_classes.py", line 509, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearSVR does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (25840, SpawnPoolWorker-8), Thread Details : (35916, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_least_angle.py", line 2251, in fit
    X, y = self._validate_data(X, y, y_numeric=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LassoLarsIC does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\svm\_classes.py", line 509, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearSVR does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (25840, SpawnPoolWorker-8), Thread Details : (35916, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_least_angle.py", line 2251, in fit
    X, y = self._validate_data(X, y, y_numeric=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LassoLarsIC does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\svm\_classes.py", line 509, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearSVR does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (25840, SpawnPoolWorker-8), Thread Details : (35916, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_least_angle.py", line 2251, in fit
    X, y = self._validate_data(X, y, y_numeric=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LassoLarsIC does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\svm\_classes.py", line 509, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearSVR does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (25840, SpawnPoolWorker-8), Thread Details : (35916, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_least_angle.py", line 2251, in fit
    X, y = self._validate_data(X, y, y_numeric=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LassoLarsIC does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\svm\_classes.py", line 509, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearSVR does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\svm\_classes.py", line 509, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearSVR does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_least_angle.py", line 1126, in fit
    X, y = self._validate_data(X, y, y_numeric=True, multi_output=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LassoLars does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_least_angle.py", line 1126, in fit
    X, y = self._validate_data(X, y, y_numeric=True, multi_output=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LassoLars does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 319, in run
    y_pred = model_trained.predict(test_attrib)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 355, in predict
    return self._decision_function(X)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 338, in _decision_function
    X = self._validate_data(X, accept_sparse=["csr", "csc", "coo"], reset=False)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearSVR does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_least_angle.py", line 1126, in fit
    X, y = self._validate_data(X, y, y_numeric=True, multi_output=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LassoLars does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\svm\_classes.py", line 509, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearSVR does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\svm\_classes.py", line 509, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearSVR does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_least_angle.py", line 1126, in fit
    X, y = self._validate_data(X, y, y_numeric=True, multi_output=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LassoLars does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_least_angle.py", line 1126, in fit
    X, y = self._validate_data(X, y, y_numeric=True, multi_output=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LassoLars does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_least_angle.py", line 1126, in fit
    X, y = self._validate_data(X, y, y_numeric=True, multi_output=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
Lars does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py", line 742, in fit
    return self._fit(X, y, incremental=False)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py", line 432, in _fit
    X, y = self._validate_input(X, y, incremental, reset=first_pass)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py", line 1583, in _validate_input
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
MLPRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py", line 742, in fit
    return self._fit(X, y, incremental=False)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py", line 432, in _fit
    X, y = self._validate_input(X, y, incremental, reset=first_pass)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py", line 1583, in _validate_input
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
MLPRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_least_angle.py", line 1126, in fit
    X, y = self._validate_data(X, y, y_numeric=True, multi_output=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
Lars does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py", line 742, in fit
    return self._fit(X, y, incremental=False)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py", line 432, in _fit
    X, y = self._validate_input(X, y, incremental, reset=first_pass)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py", line 1583, in _validate_input
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
MLPRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py", line 742, in fit
    return self._fit(X, y, incremental=False)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py", line 432, in _fit
    X, y = self._validate_input(X, y, incremental, reset=first_pass)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py", line 1583, in _validate_input
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
MLPRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py", line 742, in fit
    return self._fit(X, y, incremental=False)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py", line 432, in _fit
    X, y = self._validate_input(X, y, incremental, reset=first_pass)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py", line 1583, in _validate_input
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
MLPRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py", line 742, in fit
    return self._fit(X, y, incremental=False)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py", line 432, in _fit
    X, y = self._validate_input(X, y, incremental, reset=first_pass)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py", line 1583, in _validate_input
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
MLPRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py", line 742, in fit
    return self._fit(X, y, incremental=False)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py", line 432, in _fit
    X, y = self._validate_input(X, y, incremental, reset=first_pass)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py", line 1583, in _validate_input
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
MLPRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 319, in run
    y_pred = model_trained.predict(test_attrib)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 355, in predict
    return self._decision_function(X)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 338, in _decision_function
    X = self._validate_data(X, accept_sparse=["csr", "csc", "coo"], reset=False)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 649, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 649, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\svm\_base.py", line 192, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
NuSVR does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\svm\_base.py", line 192, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
NuSVR does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\svm\_base.py", line 192, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
NuSVR does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\svm\_base.py", line 192, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
NuSVR does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\svm\_base.py", line 192, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
NuSVR does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\svm\_base.py", line 192, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
NuSVR does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\svm\_base.py", line 192, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
NuSVR does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 319, in run
    y_pred = model_trained.predict(test_attrib)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 355, in predict
    return self._decision_function(X)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 338, in _decision_function
    X = self._validate_data(X, accept_sparse=["csr", "csc", "coo"], reset=False)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
Lars does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 319, in run
    y_pred = model_trained.predict(test_attrib)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\svm\_base.py", line 433, in predict
    X = self._validate_for_predict(X)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\svm\_base.py", line 613, in _validate_for_predict
    X = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
NuSVR does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 319, in run
    y_pred = model_trained.predict(test_attrib)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 355, in predict
    return self._decision_function(X)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 338, in _decision_function
    X = self._validate_data(X, accept_sparse=["csr", "csc", "coo"], reset=False)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LassoLars does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\svm\_base.py", line 192, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
NuSVR does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_least_angle.py", line 1126, in fit
    X, y = self._validate_data(X, y, y_numeric=True, multi_output=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LassoLars does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_least_angle.py", line 1126, in fit
    X, y = self._validate_data(X, y, y_numeric=True, multi_output=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
Lars does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\svm\_base.py", line 192, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
NuSVR does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_least_angle.py", line 1126, in fit
    X, y = self._validate_data(X, y, y_numeric=True, multi_output=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LassoLars does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_least_angle.py", line 1126, in fit
    X, y = self._validate_data(X, y, y_numeric=True, multi_output=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
Lars does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_omp.py", line 742, in fit
    X, y = self._validate_data(X, y, multi_output=True, y_numeric=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
OrthogonalMatchingPursuit does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_omp.py", line 742, in fit
    X, y = self._validate_data(X, y, multi_output=True, y_numeric=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
OrthogonalMatchingPursuit does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_omp.py", line 742, in fit
    X, y = self._validate_data(X, y, multi_output=True, y_numeric=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
OrthogonalMatchingPursuit does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\cross_decomposition\_pls.py", line 660, in fit
    super().fit(X, Y)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\cross_decomposition\_pls.py", line 232, in fit
    X = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
PLSRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_passive_aggressive.py", line 567, in fit
    return self._fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1533, in _fit
    self._partial_fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1438, in _partial_fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
PassiveAggressiveRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_omp.py", line 742, in fit
    X, y = self._validate_data(X, y, multi_output=True, y_numeric=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
OrthogonalMatchingPursuit does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\cross_decomposition\_pls.py", line 660, in fit
    super().fit(X, Y)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\cross_decomposition\_pls.py", line 232, in fit
    X = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
PLSRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_passive_aggressive.py", line 567, in fit
    return self._fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1533, in _fit
    self._partial_fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1438, in _partial_fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
PassiveAggressiveRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\cross_decomposition\_pls.py", line 660, in fit
    super().fit(X, Y)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\cross_decomposition\_pls.py", line 232, in fit
    X = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
PLSRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_omp.py", line 742, in fit
    X, y = self._validate_data(X, y, multi_output=True, y_numeric=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
OrthogonalMatchingPursuit does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_omp.py", line 742, in fit
    X, y = self._validate_data(X, y, multi_output=True, y_numeric=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
OrthogonalMatchingPursuit does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_passive_aggressive.py", line 567, in fit
    return self._fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1533, in _fit
    self._partial_fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1438, in _partial_fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
PassiveAggressiveRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\cross_decomposition\_pls.py", line 660, in fit
    super().fit(X, Y)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\cross_decomposition\_pls.py", line 232, in fit
    X = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
PLSRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (25840, SpawnPoolWorker-8), Thread Details : (35916, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 319, in run
    y_pred = model_trained.predict(test_attrib)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 355, in predict
    return self._decision_function(X)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 338, in _decision_function
    X = self._validate_data(X, accept_sparse=["csr", "csc", "coo"], reset=False)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LassoLarsIC does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_omp.py", line 742, in fit
    X, y = self._validate_data(X, y, multi_output=True, y_numeric=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
OrthogonalMatchingPursuit does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\cross_decomposition\_pls.py", line 660, in fit
    super().fit(X, Y)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\cross_decomposition\_pls.py", line 232, in fit
    X = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
PLSRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (25840, SpawnPoolWorker-8), Thread Details : (35916, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_least_angle.py", line 2251, in fit
    X, y = self._validate_data(X, y, y_numeric=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LassoLarsIC does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (25840, SpawnPoolWorker-8), Thread Details : (35916, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_least_angle.py", line 2251, in fit
    X, y = self._validate_data(X, y, y_numeric=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LassoLarsIC does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_passive_aggressive.py", line 567, in fit
    return self._fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1533, in _fit
    self._partial_fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1438, in _partial_fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
PassiveAggressiveRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\cross_decomposition\_pls.py", line 660, in fit
    super().fit(X, Y)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\cross_decomposition\_pls.py", line 232, in fit
    X = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
PLSRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\cross_decomposition\_pls.py", line 660, in fit
    super().fit(X, Y)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\cross_decomposition\_pls.py", line 232, in fit
    X = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
PLSRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_passive_aggressive.py", line 567, in fit
    return self._fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1533, in _fit
    self._partial_fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1438, in _partial_fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
PassiveAggressiveRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 319, in run
    y_pred = model_trained.predict(test_attrib)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 355, in predict
    return self._decision_function(X)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 338, in _decision_function
    X = self._validate_data(X, accept_sparse=["csr", "csc", "coo"], reset=False)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
OrthogonalMatchingPursuit does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (25840, SpawnPoolWorker-8), Thread Details : (35916, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_glm\glm.py", line 193, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
PoissonRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_omp.py", line 742, in fit
    X, y = self._validate_data(X, y, multi_output=True, y_numeric=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
OrthogonalMatchingPursuit does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_omp.py", line 742, in fit
    X, y = self._validate_data(X, y, multi_output=True, y_numeric=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
OrthogonalMatchingPursuit does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (25840, SpawnPoolWorker-8), Thread Details : (35916, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_glm\glm.py", line 193, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
PoissonRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_passive_aggressive.py", line 567, in fit
    return self._fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1533, in _fit
    self._partial_fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1438, in _partial_fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
PassiveAggressiveRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (25840, SpawnPoolWorker-8), Thread Details : (35916, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_glm\glm.py", line 193, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
PoissonRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_regression.py", line 444, in fit
    return self._fit(X, y)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_base.py", line 454, in _fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RadiusNeighborsRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_passive_aggressive.py", line 567, in fit
    return self._fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1533, in _fit
    self._partial_fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1438, in _partial_fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
PassiveAggressiveRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (25840, SpawnPoolWorker-8), Thread Details : (35916, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_glm\glm.py", line 193, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
PoissonRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_regression.py", line 444, in fit
    return self._fit(X, y)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_base.py", line 454, in _fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RadiusNeighborsRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\cross_decomposition\_pls.py", line 660, in fit
    super().fit(X, Y)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\cross_decomposition\_pls.py", line 232, in fit
    X = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
PLSRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (25840, SpawnPoolWorker-8), Thread Details : (35916, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_glm\glm.py", line 193, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
PoissonRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_regression.py", line 444, in fit
    return self._fit(X, y)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_base.py", line 454, in _fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RadiusNeighborsRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\cross_decomposition\_pls.py", line 660, in fit
    super().fit(X, Y)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\cross_decomposition\_pls.py", line 232, in fit
    X = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
PLSRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (25840, SpawnPoolWorker-8), Thread Details : (35916, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_glm\glm.py", line 193, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
PoissonRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 319, in run
    y_pred = model_trained.predict(test_attrib)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1632, in predict
    return self._decision_function(X)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1614, in _decision_function
    X = self._validate_data(X, accept_sparse="csr", reset=False)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
PassiveAggressiveRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_regression.py", line 444, in fit
    return self._fit(X, y)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_base.py", line 454, in _fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RadiusNeighborsRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (25840, SpawnPoolWorker-8), Thread Details : (35916, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_glm\glm.py", line 193, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
PoissonRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_passive_aggressive.py", line 567, in fit
    return self._fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1533, in _fit
    self._partial_fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1438, in _partial_fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
PassiveAggressiveRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_regression.py", line 444, in fit
    return self._fit(X, y)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_base.py", line 454, in _fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RadiusNeighborsRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_forest.py", line 346, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_regression.py", line 444, in fit
    return self._fit(X, y)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_base.py", line 454, in _fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RadiusNeighborsRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_passive_aggressive.py", line 567, in fit
    return self._fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1533, in _fit
    self._partial_fit(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1438, in _partial_fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
PassiveAggressiveRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_forest.py", line 346, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_regression.py", line 444, in fit
    return self._fit(X, y)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_base.py", line 454, in _fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RadiusNeighborsRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_forest.py", line 346, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 319, in run
    y_pred = model_trained.predict(test_attrib)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_regression.py", line 461, in predict
    neigh_dist, neigh_ind = self.radius_neighbors(X)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_base.py", line 1148, in radius_neighbors
    X = self._validate_data(X, accept_sparse="csr", reset=False, order="C")
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RadiusNeighborsRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_forest.py", line 346, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_ridge.py", line 1126, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
Ridge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_regression.py", line 444, in fit
    return self._fit(X, y)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_base.py", line 454, in _fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RadiusNeighborsRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_ridge.py", line 1126, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
Ridge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_forest.py", line 346, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_regression.py", line 444, in fit
    return self._fit(X, y)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neighbors\_base.py", line 454, in _fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RadiusNeighborsRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_ridge.py", line 1126, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
Ridge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_forest.py", line 346, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\svm\_base.py", line 192, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
SVR does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_ridge.py", line 1126, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
Ridge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_forest.py", line 346, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\svm\_base.py", line 192, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
SVR does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_ridge.py", line 1126, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
Ridge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\svm\_base.py", line 192, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
SVR does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_ridge.py", line 1126, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
Ridge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\svm\_base.py", line 192, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
SVR does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_ridge.py", line 1126, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
Ridge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\svm\_base.py", line 192, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
SVR does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\svm\_base.py", line 192, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
SVR does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\svm\_base.py", line 192, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
SVR does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 319, in run
    y_pred = model_trained.predict(test_attrib)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 355, in predict
    return self._decision_function(X)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 338, in _decision_function
    X = self._validate_data(X, accept_sparse=["csr", "csc", "coo"], reset=False)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
Ridge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_ridge.py", line 1126, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
Ridge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_ridge.py", line 1126, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
Ridge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_theil_sen.py", line 415, in fit
    X, y = self._validate_data(X, y, y_numeric=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
TheilSenRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_theil_sen.py", line 415, in fit
    X, y = self._validate_data(X, y, y_numeric=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
TheilSenRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_theil_sen.py", line 415, in fit
    X, y = self._validate_data(X, y, y_numeric=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
TheilSenRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_theil_sen.py", line 415, in fit
    X, y = self._validate_data(X, y, y_numeric=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
TheilSenRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_theil_sen.py", line 415, in fit
    X, y = self._validate_data(X, y, y_numeric=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
TheilSenRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_theil_sen.py", line 415, in fit
    X, y = self._validate_data(X, y, y_numeric=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
TheilSenRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_theil_sen.py", line 415, in fit
    X, y = self._validate_data(X, y, y_numeric=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
TheilSenRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 319, in run
    y_pred = model_trained.predict(test_attrib)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\svm\_base.py", line 433, in predict
    X = self._validate_for_predict(X)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\svm\_base.py", line 613, in _validate_for_predict
    X = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
SVR does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\svm\_base.py", line 192, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
SVR does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\svm\_base.py", line 192, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
SVR does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\compose\_target.py", line 262, in fit
    self.regressor_.fit(X, y_trans, **fit_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 649, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\compose\_target.py", line 262, in fit
    self.regressor_.fit(X, y_trans, **fit_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 649, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\compose\_target.py", line 262, in fit
    self.regressor_.fit(X, y_trans, **fit_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 649, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\compose\_target.py", line 262, in fit
    self.regressor_.fit(X, y_trans, **fit_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 649, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\compose\_target.py", line 262, in fit
    self.regressor_.fit(X, y_trans, **fit_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 649, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\compose\_target.py", line 262, in fit
    self.regressor_.fit(X, y_trans, **fit_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 649, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:26 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\compose\_target.py", line 262, in fit
    self.regressor_.fit(X, y_trans, **fit_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 649, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:27 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 319, in run
    y_pred = model_trained.predict(test_attrib)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\compose\_target.py", line 290, in predict
    pred = self.regressor_.predict(X, **predict_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 355, in predict
    return self._decision_function(X)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 338, in _decision_function
    X = self._validate_data(X, accept_sparse=["csr", "csc", "coo"], reset=False)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:27 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\compose\_target.py", line 262, in fit
    self.regressor_.fit(X, y_trans, **fit_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 649, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:27 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\compose\_target.py", line 262, in fit
    self.regressor_.fit(X, y_trans, **fit_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 649, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:27 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_glm\glm.py", line 193, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
TweedieRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:27 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_glm\glm.py", line 193, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
TweedieRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:27 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_glm\glm.py", line 193, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
TweedieRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:27 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_glm\glm.py", line 193, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
TweedieRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:27 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_glm\glm.py", line 193, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
TweedieRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:27 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_glm\glm.py", line 193, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
TweedieRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:27 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_glm\glm.py", line 193, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
TweedieRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:27 | Level: ERROR | Function: run | Line: 328 | (Process Details : (13888, SpawnPoolWorker-5), Thread Details : (32560, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 319, in run
    y_pred = model_trained.predict(test_attrib)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_glm\glm.py", line 362, in predict
    raw_prediction = self._linear_predictor(X)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_glm\glm.py", line 338, in _linear_predictor
    X = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GammaRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:27 | Level: ERROR | Function: run | Line: 328 | (Process Details : (13888, SpawnPoolWorker-5), Thread Details : (32560, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_glm\glm.py", line 193, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GammaRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:27 | Level: ERROR | Function: run | Line: 328 | (Process Details : (13888, SpawnPoolWorker-5), Thread Details : (32560, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_glm\glm.py", line 193, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GammaRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:27 | Level: ERROR | Function: run | Line: 328 | (Process Details : (34268, SpawnPoolWorker-7), Thread Details : (23632, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 319, in run
    y_pred = model_trained.predict(test_attrib)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 355, in predict
    return self._decision_function(X)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 338, in _decision_function
    X = self._validate_data(X, accept_sparse=["csr", "csc", "coo"], reset=False)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
HuberRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:27 | Level: ERROR | Function: run | Line: 328 | (Process Details : (34268, SpawnPoolWorker-7), Thread Details : (23632, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_huber.py", line 297, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
HuberRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:27 | Level: ERROR | Function: run | Line: 328 | (Process Details : (34268, SpawnPoolWorker-7), Thread Details : (23632, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_huber.py", line 297, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
HuberRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:27 | Level: ERROR | Function: run | Line: 328 | (Process Details : (25840, SpawnPoolWorker-8), Thread Details : (35916, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 319, in run
    y_pred = model_trained.predict(test_attrib)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_glm\glm.py", line 362, in predict
    raw_prediction = self._linear_predictor(X)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_glm\glm.py", line 338, in _linear_predictor
    X = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
PoissonRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:27 | Level: ERROR | Function: run | Line: 328 | (Process Details : (25840, SpawnPoolWorker-8), Thread Details : (35916, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_glm\glm.py", line 193, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
PoissonRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:27 | Level: ERROR | Function: run | Line: 328 | (Process Details : (25840, SpawnPoolWorker-8), Thread Details : (35916, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_glm\glm.py", line 193, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
PoissonRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:27 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 319, in run
    y_pred = model_trained.predict(test_attrib)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_glm\glm.py", line 362, in predict
    raw_prediction = self._linear_predictor(X)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_glm\glm.py", line 338, in _linear_predictor
    X = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
TweedieRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:27 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_glm\glm.py", line 193, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
TweedieRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:27 | Level: ERROR | Function: run | Line: 328 | (Process Details : (36364, SpawnPoolWorker-1), Thread Details : (34180, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_glm\glm.py", line 193, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
TweedieRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:28 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 319, in run
    y_pred = model_trained.predict(test_attrib)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_forest.py", line 982, in predict
    X = self._validate_X_predict(X)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_forest.py", line 603, in _validate_X_predict
    X = self._validate_data(X, dtype=DTYPE, accept_sparse="csr", reset=False)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:28 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_forest.py", line 346, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:28 | Level: ERROR | Function: run | Line: 328 | (Process Details : (26656, SpawnPoolWorker-4), Thread Details : (12636, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\ensemble\_forest.py", line 346, in fit
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
RandomForestRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:28 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 319, in run
    y_pred = model_trained.predict(test_attrib)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py", line 1577, in predict
    y_pred = self._forward_pass_fast(X)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py", line 197, in _forward_pass_fast
    X = self._validate_data(X, accept_sparse=["csr", "csc"], reset=False)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
MLPRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:28 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py", line 742, in fit
    return self._fit(X, y, incremental=False)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py", line 432, in _fit
    X, y = self._validate_input(X, y, incremental, reset=first_pass)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py", line 1583, in _validate_input
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
MLPRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:28 | Level: ERROR | Function: run | Line: 328 | (Process Details : (11488, SpawnPoolWorker-3), Thread Details : (35788, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py", line 742, in fit
    return self._fit(X, y, incremental=False)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py", line 432, in _fit
    X, y = self._validate_input(X, y, incremental, reset=first_pass)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py", line 1583, in _validate_input
    X, y = self._validate_data(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
MLPRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:29 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 319, in run
    y_pred = model_trained.predict(test_attrib)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 355, in predict
    return self._decision_function(X)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_base.py", line 338, in _decision_function
    X = self._validate_data(X, accept_sparse=["csr", "csc", "coo"], reset=False)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 535, in _validate_data
    X = check_array(X, input_name="X", **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
TheilSenRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:29 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_theil_sen.py", line 415, in fit
    X, y = self._validate_data(X, y, y_numeric=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
TheilSenRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 25-02-2023 06:13:29 | Level: ERROR | Function: run | Line: 328 | (Process Details : (30852, SpawnPoolWorker-2), Thread Details : (32116, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 318, in run
    model_trained = reg.fit(train_attrib, train_labels)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\linear_model\_theil_sen.py", line 415, in fit
    X, y = self._validate_data(X, y, y_numeric=True)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\base.py", line 554, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 1104, in check_X_y
    X = check_array(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
TheilSenRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
------ Date: 27-02-2023 08:44:00 | Level: ERROR | Function: run | Line: 391 | (Process Details : (15808, SpawnPoolWorker-7), Thread Details : (2000, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 385, in run
    calculated = metric_help[k][2](test_labels, y_pred)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 442, in mean_squared_error
    y_type, y_true, y_pred, multioutput = _check_reg_targets(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 102, in _check_reg_targets
    y_pred = check_array(y_pred, ensure_2d=False, dtype=dtype)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input contains NaN.
------ Date: 27-02-2023 08:44:00 | Level: ERROR | Function: run | Line: 391 | (Process Details : (15808, SpawnPoolWorker-7), Thread Details : (2000, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 385, in run
    calculated = metric_help[k][2](test_labels, y_pred)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 442, in mean_squared_error
    y_type, y_true, y_pred, multioutput = _check_reg_targets(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 102, in _check_reg_targets
    y_pred = check_array(y_pred, ensure_2d=False, dtype=dtype)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input contains NaN.
------ Date: 27-02-2023 08:44:00 | Level: ERROR | Function: run | Line: 391 | (Process Details : (15808, SpawnPoolWorker-7), Thread Details : (2000, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 385, in run
    calculated = metric_help[k][2](test_labels, y_pred)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 442, in mean_squared_error
    y_type, y_true, y_pred, multioutput = _check_reg_targets(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 102, in _check_reg_targets
    y_pred = check_array(y_pred, ensure_2d=False, dtype=dtype)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input contains NaN.
------ Date: 27-02-2023 08:44:00 | Level: ERROR | Function: run | Line: 391 | (Process Details : (15808, SpawnPoolWorker-7), Thread Details : (2000, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 385, in run
    calculated = metric_help[k][2](test_labels, y_pred)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 442, in mean_squared_error
    y_type, y_true, y_pred, multioutput = _check_reg_targets(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 102, in _check_reg_targets
    y_pred = check_array(y_pred, ensure_2d=False, dtype=dtype)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input contains NaN.
------ Date: 27-02-2023 08:44:00 | Level: ERROR | Function: run | Line: 391 | (Process Details : (15808, SpawnPoolWorker-7), Thread Details : (2000, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 385, in run
    calculated = metric_help[k][2](test_labels, y_pred)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 442, in mean_squared_error
    y_type, y_true, y_pred, multioutput = _check_reg_targets(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 102, in _check_reg_targets
    y_pred = check_array(y_pred, ensure_2d=False, dtype=dtype)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input contains NaN.
------ Date: 27-02-2023 08:44:00 | Level: ERROR | Function: run | Line: 391 | (Process Details : (15808, SpawnPoolWorker-7), Thread Details : (2000, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 385, in run
    calculated = metric_help[k][2](test_labels, y_pred)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 442, in mean_squared_error
    y_type, y_true, y_pred, multioutput = _check_reg_targets(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 102, in _check_reg_targets
    y_pred = check_array(y_pred, ensure_2d=False, dtype=dtype)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input contains NaN.
------ Date: 27-02-2023 08:44:00 | Level: ERROR | Function: run | Line: 391 | (Process Details : (15808, SpawnPoolWorker-7), Thread Details : (2000, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 385, in run
    calculated = metric_help[k][2](test_labels, y_pred)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 442, in mean_squared_error
    y_type, y_true, y_pred, multioutput = _check_reg_targets(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 102, in _check_reg_targets
    y_pred = check_array(y_pred, ensure_2d=False, dtype=dtype)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input contains NaN.
------ Date: 27-02-2023 08:44:00 | Level: ERROR | Function: run | Line: 391 | (Process Details : (15808, SpawnPoolWorker-7), Thread Details : (2000, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 385, in run
    calculated = metric_help[k][2](test_labels, y_pred)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 442, in mean_squared_error
    y_type, y_true, y_pred, multioutput = _check_reg_targets(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 102, in _check_reg_targets
    y_pred = check_array(y_pred, ensure_2d=False, dtype=dtype)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input contains NaN.
------ Date: 27-02-2023 08:44:00 | Level: ERROR | Function: run | Line: 391 | (Process Details : (15808, SpawnPoolWorker-7), Thread Details : (2000, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 385, in run
    calculated = metric_help[k][2](test_labels, y_pred)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 442, in mean_squared_error
    y_type, y_true, y_pred, multioutput = _check_reg_targets(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 102, in _check_reg_targets
    y_pred = check_array(y_pred, ensure_2d=False, dtype=dtype)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input contains NaN.
------ Date: 27-02-2023 08:44:00 | Level: ERROR | Function: run | Line: 391 | (Process Details : (15808, SpawnPoolWorker-7), Thread Details : (2000, MainThread)) | ID: 123456
Traceback (most recent call last):
  File "c:\Users\18123\OneDrive\Documents\sej2020\Machine-Learning-Project\AutoML\ScikitLearn\parSim_v5\utils.py", line 385, in run
    calculated = metric_help[k][2](test_labels, y_pred)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 442, in mean_squared_error
    y_type, y_true, y_pred, multioutput = _check_reg_targets(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\metrics\_regression.py", line 102, in _check_reg_targets
    y_pred = check_array(y_pred, ensure_2d=False, dtype=dtype)
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 919, in check_array
    _assert_all_finite(
  File "C:\Users\18123\anaconda3\envs\research\lib\site-packages\sklearn\utils\validation.py", line 161, in _assert_all_finite
    raise ValueError(msg_err)
ValueError: Input contains NaN.
