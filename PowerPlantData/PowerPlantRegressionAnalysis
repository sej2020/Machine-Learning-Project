import pandas as pd
import os
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.model_selection import StratifiedShuffleSplit
from pandas.plotting import scatter_matrix
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import cross_val_score

def load_pp_data():
    csv_path = r"C:\Users\18123\OneDrive\Documents\IU Bloomington\Machine-Learning-Project\PowerPlantData\CCPP\Folds5x2_pp.csv"
    return pd.read_csv(csv_path)

pp = load_pp_data()
# print(pp.describe())

# pp.hist(bins=50, figsize=(15,11))
# plt.show()

# train_set, test_set = train_test_split(pp,test_size=0.2,random_state=42)

pp["AT_cat"] = pd.cut(pp["AT"],bins=[0.,10.,20.,30.,np.inf],labels=[1,2,3,4])
# pp["AT_cat"].hist()
# plt.show()

split = StratifiedShuffleSplit(n_splits=1,test_size=0.2,random_state=42)
for train_index, test_index in split.split(pp,pp["AT_cat"]):
    train_set = pp.loc[train_index]
    test_set = pp.loc[test_index]

# print(train_set["AT_cat"].value_counts()/len(train_set))
# print(test_set["AT_cat"].value_counts()/len(test_set))

for set_ in(train_set,test_set):
    set_.drop("AT_cat",axis=1,inplace=True)

pptrain = train_set.copy()

# corr_matrix = pptrain.corr()
# print(corr_matrix["PE"].sort_values(ascending=False))

# pptrain.plot(kind="scatter",x="PE",y="AT",alpha=0.1)
# plt.show()


pptrain_attrib = pptrain.drop("PE",axis=1)
pptrain_labels = pptrain["PE"].copy()

scaler = StandardScaler()
scaler.fit_transform(pptrain_attrib)

lin_reg = LinearRegression()
lin_reg.fit(pptrain_attrib,pptrain_labels)

# some_data = pptrain_attrib.iloc[:5]
# some_labels = pptrain_labels.iloc[:5]
# print("Predictions:",lin_reg.predict(some_data))
# print("Labels:",list(some_labels))

pptrain_lin_predictions = lin_reg.predict(pptrain_attrib)
lin_mse = mean_squared_error(pptrain_labels, pptrain_lin_predictions)
lin_rmse = np.sqrt(lin_mse)
print(lin_rmse)

tree_reg = DecisionTreeRegressor()
tree_reg.fit(pptrain_attrib,pptrain_labels)

pptrain_tree_predictions = tree_reg.predict(pptrain_attrib)
tree_mse = mean_squared_error(pptrain_labels,pptrain_tree_predictions)
tree_rmse = np.sqrt(tree_mse)
print(tree_rmse)

tree_scores = cross_val_score(tree_reg, pptrain_attrib, pptrain_labels, scoring="neg_mean_squared_error", cv=10)
tree_rmse_scores = np.sqrt(-tree_scores)

lin_scores = cross_val_score(lin_reg, pptrain_attrib, pptrain_labels, scoring="neg_mean_squared_error", cv=10)
lin_rmse_scores = np.sqrt(-lin_scores)

def display_scores(scores):
    print(f"Mean: {scores.mean()} +- {scores.std()}")
    print("Scores:", scores)

display_scores(tree_rmse_scores)
display_scores(lin_rmse_scores)
